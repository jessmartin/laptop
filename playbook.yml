---
- hosts: all

  vars:

    applications:
      - 1password
      # - adium 
      - alfred # | http://www.alfredapp.com 
      - caffeine # prevent mac from sleeping 
      - cheatsheet # know your shortcuts
      # - cyberduck # ftp, s3, openstack
      - dropbox # a worse Mega Sync
      - eve # learn your shortcuts
      # - firefox 
      - flux # get more sleep
      - fluid
      - github-desktop
      - google-chrome
      - google-drive 
      - google-hangouts
      # - handbrake # vid compression 
      # - iterm2 
      # - licecap # GIFs !
      # - macvim # a shittier vim 
      - monolingual # remove unneeded osx lang files
      # - nvalt # fast note taking
      - qlcolorcode # quick look syntax highlighting
      - qlimagesize # quick look image dimensions
      - qlmarkdown # quick look .md files
      - qlstephen # quick look extension-less text files
      # - rdio
      - screenhero
      # - scroll-reverser
      # - shortcat # kill your mouse
      - sizeup
      - skitch 
      - skype
      - slack
      - smcfancontrol
      - sublime-text3 # (experimental cask) | http://www.sublimetext.com/
      # - truecrypt
      # - ubersicht
      # - vagrant # | https://www.vagrantup.com/downloads.html
      # - virtualbox # | https://www.virtualbox.org/
      # - vlc 
      # - vmware-fusion

    brew_taps:
      - caskroom/cask
      - caskroom/versions # for sublime-text3
      - homebrew/binary
      - homebrew/dupes # gnu grep
      - homebrew/versions 

    # dotfile_repo_username: jessmartin # the GH repo where your dotfiles are

    brew_utils:
      # - ack
      # - autoconf
      # - boot2docker # for running docker on osx
      # - brew-cask
      # - cowsay # amazing
      # - coreutils
      # - docker
      # - findutils
      # - hub
      # - mongodb
      # - mysql
      # - neo4j
      # - openssl
      # - phantomjs 
      # - postgresql
      # - readline
      # - redis
      # - rsync
      # - tmux
      # - vim
      # - wget

    home: "{{ lookup('env','HOME') }}"

  tasks:

    - name: Check Homebrew is installed
      stat: path=/usr/local/bin/brew
      register: brew_installed

    - name: Install Homebrew
      shell: ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
      when: brew_installed.stat.exists == false

    - name: Install required Homebrew Taps
      shell: brew tap {{ item }}
      with_items: brew_taps

    - name: Check homebrew-cask is installed
      stat: path=/usr/local/bin/brew-cask.rb
      register: brew_cask_installed

    - name: Install homebrew-cask
      shell: brew install brew-cask
      when: brew_cask_installed.stat.exists == false

    ### UTILS

    - name: Install libraries/utils with homebrew
      homebrew: name={{ item }} state=present
      with_items: brew_utils

    - name: Cleanup after brewing
      shell: brew cleanup


    ### APPZ

    - name: Check for installed apps(casks)
      shell: brew cask list | grep {{ item }}
      register: installed_applications
      with_items: applications
      ignore_errors: true

    - name: Install Apps with brew-cask
      shell: brew cask install {{ item }}
      with_items: applications
      when: "{{ item not in installed_applications.results|map(attribute='stdout') }}"


    ### ZSH radness 

    # - name: Determine if zsh is default/current shell
    #   shell: echo $SHELL
    #   register: current_shell

    # - name: Enable zsh in /etc/shells
    #   shell: sudo /bin/sh -c 'grep -q "{{ zsh_path }}" /etc/shells || echo "{{ zsh_path }}" >> /etc/shells'
    #   when: current_shell.stdout != '/usr/local/bin/zsh'    
    #   #" unbreak my syntax highlighting...

    # - name: Set zsh as default shell
    #   shell: chsh -s {{ zsh_path }}
    #   when: current_shell.stdout != '/usr/local/bin/zsh'
    #   sudo: true

    # - name: Use GNU tools instead of osx counterparts (grep find etc) 
    #   shell: echo 'export PATH=$(brew --prefix coreutils)/libexec/gnubin:$PATH' >> ~/.zshrc

    # - name: Install oh-my-zsh
    #   git: repo=https://github.com/robbyrussell/oh-my-zsh dest=~/.oh-my-zsh
    #   sudo: false
    #   when: install_oh_my_zsh == true
    #   tags: install_oh_my_zsh


    ### OSX SETTINGS

    # Consider swapping in https://github.com/mathiasbynens/dotfiles/blob/master/.osx instead
    # - name: Configure System Settings
    #   script: scripts/system_settings.sh
    #   sudo: true


    ### DOTFILES

    # - name: Check rcm is installed
    #   stat: path=/usr/local/bin/rcup
    #   register: rcm_installed

    # - name: Install rcm for dotfiles management
    #   shell: brew tap thoughtbot/formulae && brew install rcm
    #   when: rcm_installed.stat.exists == false

    # - name: Check ~/src dir exists
    #   stat: path=~/src/
    #   register: src_dir_exists

    # - name: Assures ~/src dir exists
    #   file: path=~/src state=directory

    # - name: Assures ~/src/thoughtbot dir exists
    #   file: path=~/src/thoughtbot state=directory

    # - name: Install thoughtbot/dotfiles
    #   git: repo=https://github.com/thoughtbot/dotfiles.git dest=~/src/thoughtbot/dotfiles

    # - name: Link ~/dotfiles to ~/src/thoughtbot/dotfiles
    #   file: dest=~/dotfiles 
    #         src=~/src/thoughtbot/dotfiles
    #         state=link
    #         force=yes

    # - name: Assures ~/src/{{ dotfile_repo_username }} dir exists
    #   file: path=~/src/{{ dotfile_repo_username }} state=directory

    # - name: Install {{ dotfile_repo_username }}/dotfiles
    #   git: repo=https://github.com/{{ dotfile_repo_username }}/dotfiles.git dest=~/src/{{ dotfile_repo_username }}/dotfiles

    # - name: Link ~/dotfiles-local to ~/src/{{ dotfile_repo_username }}/dotfiles
    #   file: dest=~/dotfiles-local
    #         src=~/src/{{ dotfile_repo_username }}/dotfiles
    #         state=link
    #         force=yes

    # - name: Generate dotfiles with rcup
    #   shell: env RCRC=~/dotfiles/rcrc rcup


    ## POST INSTALL STEPS / Cask gotchas
    #
    # require manual intervention!
    #

    # - name: Run Little Snitch Installer
    #   shell: open /opt/homebrew-cask/Caskroom/little-snitch/3.5.3/Little\ Snitch\ Installer.app
    #   when: "'little-snitch' in applications"

    - name: Run Monolingual
      shell: open ~/Applications/Monolingual.app
      when: "'monolingual' in applications"
